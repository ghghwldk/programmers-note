# '''
#
# 과제를 받은 루는 다음과 같은 순서대로 과제를 하려고 계획을 세웠습니다.
#
# 과제는 시작하기로 한 시각이 되면 시작합니다.
#
# ########### 진행중인 과제
# 새로운 과제를 시작할 시각이 되었을 때,
# 기존에 진행 중이던 과제가 있다면 진행 중이던 과제를 멈추고 새로운 과제를 시작합니다.
#
# ########### 멈춰둔 과제
# 진행중이던 과제를 끝냈을 때, 잠시 멈춘 과제가 있다면, 멈춰둔 과제를 이어서 진행합니다.
# 만약, 과제를 끝낸 시각에 새로 시작해야 되는 과제와 잠시 멈춰둔 과제가 모두 있다면, 새로 시작해야 하는 과제부터 진행합니다.
#
# 멈춰둔 과제가 여러 개일 경우, 가장 최근에 멈춘 과제부터 시작합니다.
#
# ########### result
# 과제 계획을 담은 이차원 문자열 배열 plans가 매개변수로 주어질 때, 과제를 끝낸 순서대로 이름을 배열에 담아 return 하는 solution 함수를 완성해주세요.
# '''
# from collections import deque
# def convert(before):
#     과목, 시작시간, 남은시간 = before
#
#     시작시간 = int(시작시간[:2]) * 60 + int(시작시간[3:])
#     남은시간 = int(남은시간)
#
#     after = 과목, 시작시간, 남은시간
#     return after
# '''과제는 시작하기로 한 시각이 되면 시작합니다.
#
# ########### 진행중인 과제
# 새로운 과제를 시작할 시각이 되었을 때,
# 기존에 진행 중이던 과제가 있다면 진행 중이던 과제를 멈추고 새로운 과제를 시작합니다.
#
# ########### 멈춰둔 과제
# 진행중이던 과제를 끝냈을 때, 잠시 멈춘 과제가 있다면, 멈춰둔 과제를 이어서 진행합니다.
# 만약, 과제를 끝낸 시각에 새로 시작해야 되는 과제와 잠시 멈춰둔 과제가 모두 있다면, 새로 시작해야 하는 과제부터 진행합니다.
#
# 멈춰둔 과제가 여러 개일 경우, 가장 최근에 멈춘 과제부터 시작합니다.
#
# ########### result
# 과제 계획을 담은 이차원 문자열 배열 plans가 매개변수로 주어질 때, 과제를 끝낸 순서대로 이름을 배열에 담아 return 하는 solution 함수를 완성해주세요.'''
# def solution(plans):
#     끝난과제s = []
#     멈춰둔과제s = []
#     진행중인과제 = None
#     새과제s = deque([convert(plan) for plan in plans])
# #과목, 시작시간, 남은시간
#     # 특정 한 개의 자료구조를 기준으로 잡기 어렵다면, while 무한반복문을 활용
#     while True:
#         if 진행중인과제:
#             진과, 진시, 진남 = 진행중인과제
#             진끝 = 진시 + 진남
#             # 마지막
#             if 새과제s:
#                 새과제시작여부 = 새과제s[1] <= 진끝
#                 # 새과제 시작이 필요하면, 새과
#                 if 새과제시작여부:
#
#                 else:
#
#             else:
#                 # 멈춰둔과제를 모두 넣어준다.
#                 break
#
#             if (not 멈춰둔과제s) and (not 새과제s):
#
#             if 새과제s and 멈춰둔과제s:
#                 if 새과제s[0][1] > 진끝:
#                     멈과, 멈시, 멈남 = 멈춰둔과제s.pop()
#                     진행중인과제 = 멈과, 진끝, 멈남
#             elif 새과제s:
#             elif 멈처둔과제s:
#             else:
#                 # 마지막
#                 끝난과제s.append(진과)
#                 break
#             # 끝났을 경우
#             if 진끝 <= 새시:
#                 끝난과제s.append(진과)
#             # 끝나지 않았을 경우
#             else:
#                 # 시간이 남아 있다면, 시작시각과 남은시간을 넣어준다.
#                 멈춰둔과제s.append((진과 , None, 진끝 - 새시))
#
#     return 끝난과제s
# # name, start, playtime
# plans =[["korean", "11:40", "30"], ["english", "12:10", "20"], ["math", "12:30", "40"]]
# # ["korean", "english", "math"]
#
# # plans = [["science", "12:40", "50"], ["music", "12:20", "40"], ["history", "14:00", "30"], ["computer", "12:30", "100"]]
# # ["science", "history", "computer", "music"]
# # plans = [["aaa", "12:00", "20"], ["bbb", "12:10", "30"], ["ccc", "12:40", "10"]]
# # ["bbb", "ccc", "aaa"]
#
# print(solution(plans))