'''

과제를 받은 루는 다음과 같은 순서대로 과제를 하려고 계획을 세웠습니다.

과제는 시작하기로 한 시각이 되면 시작합니다.

########### 진행중인 과제
새로운 과제를 시작할 시각이 되었을 때,
기존에 진행 중이던 과제가 있다면 진행 중이던 과제를 멈추고 새로운 과제를 시작합니다.

########### 멈춰둔 과제
진행중이던 과제를 끝냈을 때, 잠시 멈춘 과제가 있다면, 멈춰둔 과제를 이어서 진행합니다.
만약, 과제를 끝낸 시각에 새로 시작해야 되는 과제와 잠시 멈춰둔 과제가 모두 있다면, 새로 시작해야 하는 과제부터 진행합니다.

멈춰둔 과제가 여러 개일 경우, 가장 최근에 멈춘 과제부터 시작합니다.

########### result
과제 계획을 담은 이차원 문자열 배열 plans가 매개변수로 주어질 때, 과제를 끝낸 순서대로 이름을 배열에 담아 return 하는 solution 함수를 완성해주세요.
'''
from collections import deque
def convert(before):
    과목, 시작시간, 남은시간 = before

    시작시간 = int(시작시간[:2]) * 60 + int(시작시간[3:])
    남은시간 = int(남은시간)

    after = 과목, 시작시간, 남은시간
    return after
'''과제는 시작하기로 한 시각이 되면 시작합니다.

########### 진행중인 과제
새로운 과제를 시작할 시각이 되었을 때,
기존에 진행 중이던 과제가 있다면 진행 중이던 과제를 멈추고 새로운 과제를 시작합니다.

########### 멈춰둔 과제
진행중이던 과제를 끝냈을 때, 잠시 멈춘 과제가 있다면, 멈춰둔 과제를 이어서 진행합니다.
만약, 과제를 끝낸 시각에 새로 시작해야 되는 과제와 잠시 멈춰둔 과제가 모두 있다면, 새로 시작해야 하는 과제부터 진행합니다.

멈춰둔 과제가 여러 개일 경우, 가장 최근에 멈춘 과제부터 시작합니다.

########### result
과제 계획을 담은 이차원 문자열 배열 plans가 매개변수로 주어질 때, 과제를 끝낸 순서대로 이름을 배열에 담아 return 하는 solution 함수를 완성해주세요.'''
def solution(plans):
    끝난과제s = []
    멈춰스택 = []
    진행중 = None
    새과제s = [convert(plan) for plan in plans]
    새과제s = deque(sorted(새과제s, key=lambda x: x[1]))
    #과목, 시작시간, 남은시간
    while 새과제s:
        새과제 = 새과제s.popleft()
        새과, 새시, 새남 = 새과제

        if 진행중:
            진과, 진시, 진남 = 진행중
            if 진시 + 진남 > 새시:
                # print('here1')
                멈춰스택.append((진과 ,None, 진시+ 진남 - 새시))
            else:
                # print('here2')
                끝난과제s.append(진과)

                멈춰둔과제용시간 = 새시 - (진시 + 진남)
                while 멈춰둔과제용시간 > 0 and 멈춰스택:
                    멈과, 멈시, 멈남 = 멈춰스택.pop()
                    # 끝낼 수 있는 경우
                    if 멈남 <= 멈춰둔과제용시간:
                        멈춰둔과제용시간 -= 멈남
                        끝난과제s.append(멈과)
                    # 끝낼 수 없는 경우
                    else:
                        # 차감 후 다시 넣어주기
                        멈남 -= 멈춰둔과제용시간
                        멈춰둔과제용시간 = 0
                        멈춰스택.append((멈과, None, 멈남))
            진행중 = 새과제
        else:
            진행중 = 새과제
        # print('------------')
        # print('새과제s', 새과제s)
        # print('진행중', 진행중)
        # print('끝난과제s', 끝난과제s)
        # print('멈춰스택', 멈춰스택)
    끝난과제s.append(진행중[0])
    while 멈춰스택:
        멈과, 멈시, 멈남 = 멈춰스택.pop()
        끝난과제s.append(멈과)
    return 끝난과제s
# name, start, playtime
# plans =[["korean", "11:40", "30"], ["english", "12:10", "20"], ["math", "12:30", "40"]]
# ["korean", "english", "math"]

plans = [["science", "12:40", "50"], ["music", "12:20", "40"], ["history", "14:00", "30"], ["computer", "12:30", "100"]]
# ["science", "history", "computer", "music"]
# plans = [["aaa", "12:00", "20"], ["bbb", "12:10", "30"], ["ccc", "12:40", "10"]]
# ["bbb", "ccc", "aaa"]

print(solution(plans))